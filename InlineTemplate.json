{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter & 2016-Datacenter."
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "minLength": 3,
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "vmssadmin",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. For example, if stored on a public GitHub repo, you'd use the following URI: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vmss-windows-webapp-dsc-autoscale."
      },
      "defaultValue": "https://zulf-fire.github.io/VMSS-Files"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  If your artifacts are stored on a public repo or public storage account you can leave this blank."
      }
    },
    "powershelldscZip": {
      "type": "string",
      "defaultValue": "/CreateFolderTemp.ps1.zip",
      "metadata": {
        "description": "Location of the PowerShell DSC zip file relative to the URI specified in the _artifactsLocation, i.e. /DSC/IISInstall.ps1.zip"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "DNSServerAddress": {
      "type": "string",
      "metadata": {
        "Description": "The DNS address(es) of the DNS Server(s) used by the VNET"
      }
    },
    "powershelldscUpdateTagVersion": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "Version number of the DSC deployment. Changing this value on subsequent deployments will trigger the extension to run."
      }
    },
    "New1VirtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Sets the new VNet Resource group"
      }
    },
    "existingRemoteVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Set the remote VNet name"
      }
    },
    "existingRemoteVirtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Sets the remote VNet Resource group"
      }
    },
    "existingSubscriptionID": {
      "type": "string",
      "metadata": {
        "description": "Sets the remote VNet Resource group"
      }
    }
  },

    "variables": {
      "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
      "longNamingInfix": "[toLower(parameters('vmssName'))]",
      "addressPrefix": "10.2.0.0/23",
      "subnetPrefix": "10.2.0.0/24",
      "powershelldscZipFullPath": "[concat(parameters('_artifactsLocation'), parameters('powershelldscZip'))]",
      //"RG": "[parameters('NewVirtualNetworkResourceGroupName')]",
      "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
      "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
      "nicName": "[concat(variables('namingInfix'), 'nic')]",
      //"publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
      "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
      "osType": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "[parameters('windowsOSVersion')]",
        "version": "latest"
      },
      "imageReference": "[variables('osType')]",
      "remoteVNet": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]",
      "localVNet": "[resourceId(parameters('New1VirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
      "peeringName1": "[concat(variables('virtualNetworkName'), '/peering-to-remote-vnet')]",
      "peeringName2": "[concat(parameters('existingRemoteVirtualNetworkName'), '/peering-to-local-vnet')]"
    },
    "resources": [
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "apiVersion": "2016-03-30",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('addressPrefix')]"
            ]
          },
          "dhcpOptions": {
            "dnsServers": [ "[parameters('DNSServerAddress')]" ] //CHECK THE DOUBLE SQUARE BRACKETS FOR THIS PARAMAETER
          },
          "subnets": [
            {
              "name": "[variables('subnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
        "name": "[variables('peeringName1')]",
        "apiVersion": "2017-06-01",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
          //"[concat('Microsoft.Network/virtualNetworks/', parameters('existingRemoteVirtualNetworkName'))]"
        ],
        "properties": {
          "allowVirtualNetworkAccess": true,
          "allowForwardedTraffic": false,
          "allowGatewayTransit": false,
          "useRemoteGateways": false,
          "remoteVirtualNetwork": {
            "id": "[variables('remoteVNet')]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('namingInfix')]",
        "location": "[parameters('location')]",
        "apiVersion": "2017-03-30",
        "sku": {
          "name": "[parameters('vmSku')]",
          "tier": "Standard",
          "capacity": "[parameters('instanceCount')]"
        },
        "properties": {
          "overprovision": "true",
          "upgradePolicy": {
            "mode": "Automatic"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "caching": "ReadWrite",
                "createOption": "FromImage"
              },
              "imageReference": "[variables('imageReference')]"
            },
            "osProfile": {
              "computerNamePrefix": "[variables('namingInfix')]",
              "adminUsername": "[parameters('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "joindomain",
                  "properties": {
                    "publisher": "Microsoft.Compute",
                    "type": "JsonADDomainExtension",
                    "typeHandlerVersion": "1.3",
                    "settings": {
                      "Name": "lothbrok.local",
                      "OUPath": "OU=Extension,OU=Computer Accounts,DC=lothbrok,DC=local",
                      "User": "lothbrok\\ragnar",
                      "Restart": "true",
                      "Options": "3"
                    },
                    "protectedsettings": {
                      "Password": "xxxxxx"
                    }
                  }
                },
                {
                  "name": "TempFolder",
                  "properties": {
                    "provisionAfterExtensions": [
                      "joindomain"
                    ],
                    "publisher": "Microsoft.Powershell",
                    "type": "DSC",
                    "typeHandlerVersion": "2.9",
                    "autoUpgradeMinorVersion": true,
                    "forceUpdateTag": "[parameters('powershelldscUpdateTagVersion')]",
                    "settings": {
                      "configuration": {
                        "url": "[variables('powershelldscZipFullPath')]",
                        "script": "CreateFolderTemp.ps1",
                        "function": "CreateFolderTemp"
                      },
                      "configurationArguments": {
                        "nodeName": "localhost"
                      }
                    }

                  }
                }
                  
              ]
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[variables('nicName')]",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "[variables('ipConfigName')]",
                        "properties": {
                          "subnet": {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                          },
                          "publicIpAddressConfiguration": {
                            "name": "pub",
                            "properties": {
                              "idleTimeoutInMinutes": 15
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2017-05-10",
        "name": "nestedTemplate_Peering",
        "resourceGroup": "[parameters('existingRemoteVirtualNetworkResourceGroupName')]",
        "subscriptionId": "[parameters('existingSubscriptionID')]",
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "properties": {
          "mode": "Incremental",

          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
            },
            "variables": {},
            "resources": [
              {
                "name": "[variables('peeringName2')]",
                "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                "apiVersion": "2017-10-01",
                "properties": {
                  "allowVirtualNetworkAccess": true,
                  "allowForwardedTraffic": false,
                  "allowGatewayTransit": false,
                  "useRemoteGateways": false,
                  "remoteVirtualNetwork": {
                    "id": "[variables('localVNet')]"
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }